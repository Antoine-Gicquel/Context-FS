#!/usr/bin/env python3

import os
import sys
import errno
import asyncio
import trio
import pyfuse3
from pyfuse3 import Operations, EntryAttributes, FUSEError

class CtxFS(Operations):
	def __init__(self, origin):
		super(CtxFS, self).__init__()
		self.origin = origin
		self.inode_path_map = { pyfuse3.ROOT_INODE: '/' }
		self.global_context = []
		self.global_context_file = "/context"
		self.wrapped_folder = "/wrapped"
		self.uid = os.getuid()
		self.gid = os.getgid()

	def _inode_to_path(self, inode):
		try:
			val = self._inode_path_map[inode]
		except KeyError:
			raise FUSEError(errno.ENOENT)
		return val

	def set_origin(self, orig):
		self.origin = orig

	def add_context(self, L):
		for word in L:
			if len(word) > 0:
				self.global_context.append(word.strip(b'\n \t\r'))
		print("Context is now", self.global_context)

	def is_wrapped_file(self, path):
		if path.startswith(self.wrapped_folder + "/"):
			p = path[len(self.wrapped_folder + "/"):]
			return os.path.isfile(os.path.join(self.origin, p))
		return False

	def is_wrapped_folder(self, path):
		if path.startswith(self.wrapped_folder + "/"):
			p = path[len(self.wrapped_folder + "/"):]
			return os.path.isdir(os.path.join(self.origin, p))
		return False

	def list_wrapped_folder(self, path):
		if path.startswith(self.wrapped_folder + "/"):
			p = path[len(self.wrapped_folder + "/"):]
			return os.listdir(os.path.join(self.origin, p))
		raise FUSEError(errno.ENOENT)

	def read_wrapped_file(self, path, size, offset, fh):
		if path.startswith(self.wrapped_folder + "/"):
			p = path[len(self.wrapped_folder + "/"):]
			c = b'\n'.join(self.global_context)
			if len(c) > 0:
				c += b'\n'
			if size + offset <= len(c):
				return c[offset:offset + size]
			with open(os.path.join(self.origin, p), 'rb') as f:
				c += f.read(offset + size - len(c))
			return c[offset:offset + size]
		raise FUSEError(errno.ENOENT)

	def get_wrapped_file_size(self, path):
		return len(self.read_wrapped_file(path))

	# Filesystem methods
	async def getattr(self, inode, fh=None):
		path = self._inode_to_path(inode)
		if path == '/':
			return EntryAttributes(st_mode=0o40755, st_size=4096, st_uid=self.uid, st_gid=self.gid)
		if path == self.global_context_file:
			return EntryAttributes(st_mode=0o100644, st_size=len(b'\n'.join(self.global_context)) + int(len(self.global_context) > 0), st_uid=self.uid, st_gid=self.gid)
		if path == self.wrapped_folder:
			return EntryAttributes(st_mode=0o40755, st_size=4096, st_uid=self.uid, st_gid=self.gid)
		if self.is_wrapped_folder(path):
			return EntryAttributes(st_mode=0o40755, st_size=4096, st_uid=self.uid, st_gid=self.gid)
		if self.is_wrapped_file(path):
			return EntryAttributes(st_mode=0o100444, st_size=self.get_wrapped_file_size(path), st_uid=self.uid, st_gid=self.gid)
		raise FUSEError(errno.ENOENT)

	async def readdir(self, path, fh):
		if path == "/":
			return ['.', '..', self.wrapped_folder.lstrip('/'), self.global_context_file.lstrip('/')]
		if path == self.wrapped_folder:
			return ['.', '..'] + os.listdir(self.origin)
		if self.is_wrapped_folder(path):
			return ['.', '..'] + self.list_wrapped_folder(path)
		raise FUSEError(errno.ENOENT)

	async def read(self, path, size, offset, fh):
		if path == self.global_context_file:
			context_string = b"\n".join(self.global_context)
			if len(context_string) > 0:
				context_string += b"\n"
			return context_string[offset:offset + size]
		if self.is_wrapped_file(path):
			return self.read_wrapped_file(path, size, offset, fh)
		raise FUSEError(errno.ENOENT)

	async def write(self, path, data, offset, fh):
		if path == self.global_context_file:
			self.add_context(data.split(b'\n'))
			return len(data)
		else:
			raise FUSEError(errno.ENOENT)

	async def open(self, path, flags):
		return 0

	async def create(self, path, mode, flags, ctx):
		if path == self.global_context_file:
			return 0
		else:
			raise FUSEError(errno.ENOENT)

	async def truncate(self, path, length, fh=None):
		return 0

def main(mountpoint, origin):
	fuse_options = set(pyfuse3.default_options)
	fuse_options.add('fsname=CtxFS')

	fs = CtxFS(origin)
	# Start the event loop with the Fuse filesystem
	pyfuse3.init(fs, mountpoint, fuse_options)
	# loop.run_until_complete(fs.create('/context', 0o644, 0, None))
	try:
		trio.run(pyfuse3.main)
	except KeyboardInterrupt:
		pass
	finally:
		# Clean up at exit
		fs.close()
		pyfuse3.close(mountpoint)

if __name__ == '__main__':
	import argparse
	parser = argparse.ArgumentParser()
	parser.add_argument('origin', help='Folder to wrap with context')
	parser.add_argument('mountpoint', help='Directory to mount the wrapping filesystem')
	args = parser.parse_args()
	main(args.mountpoint, args.origin)
